<story path="com/wipro/ta/stories/my.story" title="">
<beforeStorySteps>
</beforeStorySteps>
<scenario keyword="Scenario:" title="Narrative 1:
As a user 
I want to calculate the total Like-to-time coefficient to be maximum for the dishes.">
<examples keyword="Examples:">
<step>Given a collection &lt;notRemoved&gt;</step>
<step>When calculate this collection by maximum sum of all possible</step>
<step>Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step>Given a collection &lt;dishesNumber&gt;</step>
<step>When remove dishes &lt;removed&gt;</step>
<step>And calculate this collection by maximum sum of all possible left dishes</step>
<step>Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<parameters>
<names><name>notRemoved</name><name>coefficient</name></names>
<values><value>[-1,3,4]</value><value>17</value></values>
<values><value>Narrative 2:</value><value></value></values>
<values><value>As a user</value><value></value></values>
<values><value>I want to be able remove some dishes, in which case, a new coefficient is calculated using the left dishes.</value><value></value></values>
<values><value>Given a collection &lt;dishesNumber&gt;</value><value></value></values>
<values><value>When remove dishes &lt;removed&gt;</value><value></value></values>
<values><value>And calculate this collection by maximum sum of all possible left dishes</value><value></value></values>
<values><value>Then the result should be &lt;coefficient&gt;</value><value></value></values>
<values><value>Acceptance Criteria 2:</value><value></value></values>
<values><value>Check the solution when a dish must be removed and when no dishes is removed</value><value></value></values>
<values><value>Examples:</value><value></value></values>
<values><value>dishesNumber</value><value>removed</value></values>
<values><value>[-1,-9,0,5,-7]</value><value>[-9, -7]</value></values>
</parameters>

<example keyword="Example:">{notRemoved=[-1,3,4], coefficient=17}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Narrative 2:, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=As a user, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=I want to be able remove some dishes, in which case, a new coefficient is calculated using the left dishes., coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Given a collection &lt;dishesNumber&gt;, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=When remove dishes &lt;removed&gt;, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=And calculate this collection by maximum sum of all possible left dishes, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Then the result should be &lt;coefficient&gt;, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Acceptance Criteria 2:, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Check the solution when a dish must be removed and when no dishes is removed, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=Examples:, coefficient=}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=dishesNumber, coefficient=removed}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>

<example keyword="Example:">{notRemoved=[-1,-9,0,5,-7], coefficient=[-9, -7]}</example>
<step outcome="pending" keyword="PENDING">Given a collection &lt;notRemoved&gt;</step>
<step outcome="notPerformed" keyword="NOT PERFORMED">When calculate this collection by maximum sum of all possible</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 1:
Check that solution returns the correct coefficient for a valid input of dishes</step>
<step outcome="pending" keyword="PENDING">Given a collection &lt;dishesNumber&gt;</step>
<step outcome="pending" keyword="PENDING">When remove dishes &lt;removed&gt;</step>
<step outcome="pending" keyword="PENDING">And calculate this collection by maximum sum of all possible left dishes</step>
<step outcome="pending" keyword="PENDING">Then the result should be &lt;coefficient&gt;

Acceptance Criteria 2:
Check the solution when a dish must be removed and when no dishes is removed</step>
<pendingMethod>@Given(&quot;a collection &lt;notRemoved&gt;&quot;)
@Pending
public void givenACollectionnotRemoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 1:\r\nCheck that solution returns the correct coefficient for a valid input of dishes&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria1CheckThatSolutionReturnsTheCorrectCoefficientForAValidInputOfDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Given(&quot;a collection &lt;dishesNumber&gt;&quot;)
@Pending
public void givenACollectiondishesNumber() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;remove dishes &lt;removed&gt;&quot;)
@Pending
public void whenRemoveDishesremoved() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@When(&quot;calculate this collection by maximum sum of all possible left dishes&quot;)
@Pending
public void whenCalculateThisCollectionByMaximumSumOfAllPossibleLeftDishes() {
  // PENDING
}
</pendingMethod>
<pendingMethod>@Then(&quot;the result should be &lt;coefficient&gt;\r\n\r\nAcceptance Criteria 2:\r\nCheck the solution when a dish must be removed and when no dishes is removed&quot;)
@Pending
public void thenTheResultShouldBecoefficientAcceptanceCriteria2CheckTheSolutionWhenADishMustBeRemovedAndWhenNoDishesIsRemoved() {
  // PENDING
}
</pendingMethod>
</examples>
</scenario>
<afterStorySteps>
</afterStorySteps>
</story>
